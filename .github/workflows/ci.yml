name: CI

on: 
  push:
  pull_request:
  release:
    types: [published]

env:
  IMAGE_REPOSITORY: registry.digitalocean.com/frenzylabs/web
  ASSET_IMAGE_REPOSITORY: registry.digitalocean.com/frenzylabs/web_assets
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#   HARNESS_WEBHOOK_QA_DEPLOY: ${{ secrets.HARNESS_WEBHOOK_QA_DEPLOY }}
#   HARNESS_WEBHOOK_PROD_DEPLOY: ${{ secrets.HARNESS_WEBHOOK_QA_DEPLOY }}

jobs:
  ci:
    runs-on: ubuntu-latest
    container:
      image: frenzylab/devcontainer:latest
    
    
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: './layerkeep'
          persist-credentials: false
      
      # - name: Checkout
      #   uses: actions/checkout@v2
      #   if: github.event_name == 'pull_request'
      #   with:
      #     ref: refs/heads/${{ github.head_ref }}
      #     path: './from_branch'
      #     persist-credentials: false
      # - name: Update SHA
      #   run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/site/_meta

      - name: Set release version info
        if: github.event_name == 'release'
        run: |
          echo "::set-env name=VERSION::${{ github.event.release.tag_name }}"
          echo "::set-env name=TARGET::prod"
      
      - name: Set commit version info
        if: github.event_name == 'push'
        run: |
          echo "::set-env name=VERSION::$(echo "$GITHUB_SHA" | cut -c1-7)"
          echo "::set-env name=TARGET::staging"

      - name: Set PR version info
        if: github.event_name == 'pull_request'
        run: |
          echo "::set-env name=VERSION::pr-${{ github.event.pull_request.number }}"
          echo "::set-env name=TARGET::staging"

      - name: Test GH DIR
        run: |
          echo $GITHUB_WORKSPACE
          ls $GITHUB_WORKSPACE

      # - name: Install doctl
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set build info
        run: |
          echo "::set-env name=DIGITALOCEAN_ACCESS_TOKEN::${DIGITALOCEAN_ACCESS_TOKEN}"
          echo "::set-env name=BUILD_TAG::${VERSION}-build"
          echo "::set-env name=IMAGE::${IMAGE_REPOSITORY}:${VERSION}"
          echo "::set-env name=ASSET_IMAGE::${ASSET_IMAGE_REPOSITORY}:${VERSION}-build"
          echo "::set-env name=BUILD_IMAGE::${IMAGE_REPOSITORY}:${VERSION}-build"

      # - name: Cache node modules
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: |
      #       **/node_module_cache
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - name: Cache gems
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-gems
      #   with:
      #     path: |
      #       **/vendor/cache
      #       **/vendor/bundle
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/Gemfile.lock') }}
      #       ${{ runner.os }}-
            
      # - name: Cache assets
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cache-assets
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: public/pack
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - name: Build docker build image
      #   run: |
      #     IMAGE=${BUILD_IMAGE} ./layerkeep/scripts/ci.sh docker_build_target

      # - name: Build docker build asset image
      #   run: |
      #     IMAGE=${BUILD_IMAGE} ASSET_IMAGE=${ASSET_IMAGE} ./layerkeep/scripts/ci.sh docker_build_assets

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login

      # - name: Push docker images
      #   run: |
      #     docker push ${BUILD_IMAGE}
      #     docker push ${ASSET_IMAGE}

      - name: Check out layerkeep infra
        uses: actions/checkout@v2
        # if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.FL_WORKFLOW_PAT }}
          path: layerkeep-infra
          fetch-depth: 0
          persist-credentials: false
          repository: frenzylabs/layerkeep-infra

      - name: doctl auth
        run: doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: testget pods 
        run: |
          echo $DIGITALOCEAN_ACCESS_TOKEN
          cd $GITHUB_WORKSPACE/layerkeep-infra

          KUBECONFIG=${PWD}/${TARGET}/config doctl kubernetes cluster kubeconfig save layerkeep1-nyc3
          make ${TARGET} get-pods

      # - name: saml aws login
      #   run: |
      #     cp $GITHUB_WORKSPACE/layerkeep-infra/.saml2aws ~/
      #     echo "GOOGLE PASS = ${{ secrets.CI_GOOGLE_PASSWORD }}"
      #     echo "saml2aws login --profile='default' \
      #          --username=ci@frenzylabs.com \
      #          --password=${{ secrets.CI_GOOGLE_PASSWORD }} \
      #          --skip-prompt"

      #     saml2aws login --profile='default' \
      #          --username=ci@frenzylabs.com \
      #          --password=${{ secrets.CI_GOOGLE_PASSWORD }} \
      #          --skip-prompt

      # - name: Configure AWS credentials from Test account
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY }}
      #     aws-secret-access-key: ${{ secrets.CI_AWS_ACCESS_SECRET }}
      #     aws-region: us-east-1

      - name: test skaffold
        run: skaffold -h

      - name: test sops
        run: sops -h

      - name: test plugins
        run: helm plugin list

      - name: test secrets
        run: helm secrets -h

          # echo $PWD
          # helm secrets -h

      - name: test template 
        run: |
          echo $PWD
          cd $GITHUB_WORKSPACE/layerkeep-infra
          helm secrets template layerkeep charts/layerkeep -f ./charts/layerkeep/values.yaml -f ./charts/layerkeep/values.staging.yaml -f ./secrets/secrets.staging.yaml


      # - name: Update layerkeep infra chart values
      #   run: |
      #     TAG=${BUILD_TAG} TARGET=${TARGET} ./layerkeep/scripts/ci.sh update_infa_config

      # - name: install helm secrets
      #   run: |
      #     cd $GITHUB_WORKSPACE/layerkeep-infra
      #     helm plugin install https://github.com/futuresimple/helm-secrets


      # - name: Create Pull Request
      #   id: cpr
      #   uses: peter-evans/create-pull-request@v2
      #   with:
      #     token: ${{ secrets.FL_WORKFLOW_PAT }}
      #     path: layerkeep-infra
      #     commit-message: Update Layerkeep ${{ env.TARGET }} Config
      #     branch: "${{ env.TARGET }}-layerkeep"
      #     base: master
      #     committer: GitHub <action@github.com>
      #     author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
      #     title: '${{ env.TARGET }} - Layerkeep Config'
      #     body: |
      #       New ${{ env.TARGET }} Config
      #       - Contains *today's* date
      #       - Auto-generated by [create-pull-request][1]

      #       [1]: https://github.com/peter-evans/create-pull-request
      #     labels: layerkeep, automated pr, ${{ env.TARGET }}
      #     team-reviewers: owners, maintainers
      #     # milestone: 1
      #     draft: false


          # branch: layerkeep-${TARGET}
          # # request-to-parent: false


      
